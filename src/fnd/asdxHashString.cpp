//-----------------------------------------------------------------------------
// File : asdxHashString.cpp
// Desc : Hash String.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <asdxHashString.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// HashString class
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      コンストラクタです.
//-----------------------------------------------------------------------------
HashString::HashString()
: m_String()
, m_Hash  (0)
{ /* DO_NOTHING */ }

//-----------------------------------------------------------------------------
//      引数付きコンストラクタです.
//-----------------------------------------------------------------------------
HashString::HashString(const char* value)
: m_String(value)
{ m_Hash = asdx::Fnv1a(value).GetHash(); }

//-----------------------------------------------------------------------------
//      引数付きコンストラクタです.
//-----------------------------------------------------------------------------
HashString::HashString(const std::string& value)
: m_String(value)
{ m_Hash = asdx::Fnv1a(value.c_str()).GetHash(); }

//-----------------------------------------------------------------------------
//      文字列を取得します.
//-----------------------------------------------------------------------------
const char* HashString::c_str() const
{ return m_String.c_str(); }

//-----------------------------------------------------------------------------
//      std::stringを取得します.
//-----------------------------------------------------------------------------
const std::string& HashString::std_str() const
{ return m_String; }

//-----------------------------------------------------------------------------
//      ハッシュ値を取得します.
//-----------------------------------------------------------------------------
uint32_t HashString::hash() const
{ return m_Hash; }

//-----------------------------------------------------------------------------
//      文字列が空かどうかチェックします.
//-----------------------------------------------------------------------------
bool HashString::empty() const
{ return m_String.empty() || m_String == ""; }

//-----------------------------------------------------------------------------
//      文字数を取得します.
//-----------------------------------------------------------------------------
size_t HashString::size() const
{ return m_String.size(); }

//-----------------------------------------------------------------------------
//      operator == です.
//-----------------------------------------------------------------------------
bool HashString::operator == (const HashString& value) const
{ return m_Hash == value.m_Hash; }

//-----------------------------------------------------------------------------
//      operator != です.
//-----------------------------------------------------------------------------
bool HashString::operator != (const HashString& value) const
{ return m_Hash != value.m_Hash; }

//-----------------------------------------------------------------------------
//      operator < です.
//-----------------------------------------------------------------------------
bool HashString::operator < (const HashString& value) const
{ return m_Hash < value.m_Hash; }

//-----------------------------------------------------------------------------
//      operator > です.
//-----------------------------------------------------------------------------
bool HashString::operator > (const HashString& value) const
{ return m_Hash > value.m_Hash; }

//-----------------------------------------------------------------------------
//      operator = です.
//-----------------------------------------------------------------------------
HashString& HashString::operator = (const HashString& value)
{
    m_String = value.m_String;
    m_Hash = asdx::Fnv1a(value.c_str()).GetHash();
    return *this;
}

} // namespace asdx