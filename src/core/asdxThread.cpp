//-----------------------------------------------------------------------------
// File : asdxThread.cpp
// Desc : Thread.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cassert>
#include <Windows.h>
#include <core/asdxThread.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Thread class
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      デストラクタです.
//-----------------------------------------------------------------------------
Thread::~Thread()
{
    // Join()していない場合はアサートを発生させる.
    assert(m_Handle == nullptr);
    assert(m_Id == 0);
}

//-----------------------------------------------------------------------------
//      スレッドを実行します.
//-----------------------------------------------------------------------------
void Thread::Run(ThreadFunc func, void* user)
{ m_Handle = reinterpret_cast<void*>(CreateThread(NULL, 0, func, user, 0, &m_Id)); }

//-----------------------------------------------------------------------------
//      オブジェクトがスレッドと関連付けられているかチェックします.
//-----------------------------------------------------------------------------
bool Thread::Joinable()
{ return m_Id != 0; }

//-----------------------------------------------------------------------------
//      スレッドが終了するまで待機します.
//-----------------------------------------------------------------------------
void Thread::Join()
{
    assert(m_Id != 0);
    assert(m_Handle != nullptr);

    auto handle = reinterpret_cast<HANDLE>(m_Handle);
    WaitForSingleObject(handle, INFINITE);

    CloseHandle(handle);
    m_Id = 0;
    m_Handle = nullptr;
}

} // namespace asdx
