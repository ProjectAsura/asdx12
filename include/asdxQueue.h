//-----------------------------------------------------------------------------
// File : asdxQueue.h
// Desc : Queue.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cassert>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Queue class
///////////////////////////////////////////////////////////////////////////////
template<typename T>
class Queue
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    class Node;
    typedef Queue<T>::Node QueueNode;

    ///////////////////////////////////////////////////////////////////////////
    // Node clas
    ///////////////////////////////////////////////////////////////////////////
    class Node
    {
        //=====================================================================
        // list of friend classes and methods.
        //=====================================================================
        friend class Queue<T>;

    public:
        //=====================================================================
        // public variables.
        //=====================================================================
        /* NOTHING */

        //=====================================================================
        // public methods.
        //=====================================================================

        //---------------------------------------------------------------------
        //! @brief      コンストラクタです.
        //---------------------------------------------------------------------
        Node()
        : m_Next(nullptr)
        , m_Prev(nullptr)
        { /* DO_NOTHING */ }

        //---------------------------------------------------------------------
        //! @brief      デストラクタです.
        //---------------------------------------------------------------------
        ~Node()
        {
            auto prev = QueueNode::m_Prev;
            auto next = QueueNode::m_Next;

            if (prev != nullptr)
            { prev->QueueNode::m_Next = next; }

            if (next != nullptr)
            { next->QueueNode::m_Prev = prev; }

            QueueNode::m_Prev = nullptr;
            QueueNode::m_Next = nullptr;
        }

    private:
        //=====================================================================
        // private variables.
        //=====================================================================
        T*  m_Next = nullptr;       //!< 次のノード.
        T*  m_Prev = nullptr;       //!< 前のノード.

        //---------------------------------------------------------------------
        //! @brief      リンクを設定します.
        //---------------------------------------------------------------------
        static void Link(T* lhs, T* rhs)
        {
            if (lhs == nullptr || rhs == nullptr)
            { return; }

            lhs->QueueNode::m_Next = rhs;
            rhs->QueueNode::m_Prev = lhs;
        }

        //---------------------------------------------------------------------
        //! @brief      リンクを解除します.
        //---------------------------------------------------------------------
        static void Unlink(T* node)
        {
            if (node == nullptr)
            { return; }

            auto prev = node->QueueNode::m_Prev;
            auto next = node->QueueNode::m_Next;

            if (prev != nullptr)
            { prev->QueueNode::m_Next = next; }

            if (next != nullptr)
            { next->QueueNode::m_Prev = prev; }

            node->QueueNode::m_Prev = nullptr;
            node->QueueNode::m_Next = nullptr;
        }
    };

    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Queue()
    : m_Head(nullptr)
    , m_Tail(nullptr)
    , m_Count(0)
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Queue()
    { Clear(); }

    //-------------------------------------------------------------------------
    //! @brief      キューを破棄します.
    //-------------------------------------------------------------------------
    void Clear()
    {
        auto itr = m_Head;
        while(itr != nullptr)
        {
            auto node = itr;
            QueueNode::Unlink(node);

            if (itr->QueueNode::m_Next == nullptr)
            { break; }

            itr = itr->QueueNode::m_Next;
        }

        m_Head = nullptr;
        m_Tail = nullptr;

        m_Count = 0;
    }

    //-------------------------------------------------------------------------
    //! @brief      キューに追加します.
    //-------------------------------------------------------------------------
    void Push(T* node)
    {
        if (node == nullptr)
        { return; }

        // 継承チェック.
        assert(static_cast<QueueNode*>(node) != nullptr);

        if (m_Head == nullptr)
        {
            m_Head = node;
            m_Tail = node;
        }
        else
        {
            QueueNode::Link(m_Tail, node);
            m_Tail = node;
        }
        m_Count++;
    }

    //-------------------------------------------------------------------------
    //! @brief      キューから取り出します.
    //-------------------------------------------------------------------------
    T* Pop()
    {
        if (m_Head == nullptr)
        { return nullptr; }

        auto head = m_Head;
        auto next = m_Head->QueueNode::m_Next;
        QueueNode::Unlink(head);
        m_Head = next;
        m_Count--;
        return head;
    }

    //-------------------------------------------------------------------------
    //! @brief      空かどうかチェックします.
    //-------------------------------------------------------------------------
    bool IsEmpty() const
    { return m_Count == 0; }

    //-------------------------------------------------------------------------
    //! @brief      格納数を取得します.
    //-------------------------------------------------------------------------
    size_t GetCount() const
    { return m_Count; }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    T*      m_Head  = nullptr;
    T*      m_Tail  = nullptr;
    size_t  m_Count = 0;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx
