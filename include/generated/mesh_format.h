// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESH_ASDX_RES_H_
#define FLATBUFFERS_GENERATED_MESH_ASDX_RES_H_

#include "flatbuffers/flatbuffers.h"

#include "base_format.h"

namespace asdx {
namespace res {

struct ResMesh;
struct ResMeshBuilder;

struct ResModel;
struct ResModelBuilder;

struct ResMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResMeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_NORMALS = 6,
    VT_TEXCOORDS = 8,
    VT_BONEINDICES = 10,
    VT_BONEWEIGHTS = 12,
    VT_VERTEXINDICES = 14,
    VT_MATERIALID = 16,
    VT_BONESTRIDE = 18
  };
  const flatbuffers::Vector<const asdx::res::Float3 *> *positions() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float3 *> *>(VT_POSITIONS);
  }
  const flatbuffers::Vector<const asdx::res::Float3 *> *normals() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float3 *> *>(VT_NORMALS);
  }
  const flatbuffers::Vector<const asdx::res::Float2 *> *texCoords() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float2 *> *>(VT_TEXCOORDS);
  }
  const flatbuffers::Vector<uint32_t> *boneIndices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_BONEINDICES);
  }
  const flatbuffers::Vector<float> *boneWeights() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_BONEWEIGHTS);
  }
  const flatbuffers::Vector<uint32_t> *vertexIndices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_VERTEXINDICES);
  }
  uint32_t materialId() const {
    return GetField<uint32_t>(VT_MATERIALID, 0);
  }
  uint32_t boneStride() const {
    return GetField<uint32_t>(VT_BONESTRIDE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(positions()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.VerifyVector(normals()) &&
           VerifyOffset(verifier, VT_TEXCOORDS) &&
           verifier.VerifyVector(texCoords()) &&
           VerifyOffset(verifier, VT_BONEINDICES) &&
           verifier.VerifyVector(boneIndices()) &&
           VerifyOffset(verifier, VT_BONEWEIGHTS) &&
           verifier.VerifyVector(boneWeights()) &&
           VerifyOffset(verifier, VT_VERTEXINDICES) &&
           verifier.VerifyVector(vertexIndices()) &&
           VerifyField<uint32_t>(verifier, VT_MATERIALID) &&
           VerifyField<uint32_t>(verifier, VT_BONESTRIDE) &&
           verifier.EndTable();
  }
};

struct ResMeshBuilder {
  typedef ResMesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_positions(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> positions) {
    fbb_.AddOffset(ResMesh::VT_POSITIONS, positions);
  }
  void add_normals(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> normals) {
    fbb_.AddOffset(ResMesh::VT_NORMALS, normals);
  }
  void add_texCoords(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float2 *>> texCoords) {
    fbb_.AddOffset(ResMesh::VT_TEXCOORDS, texCoords);
  }
  void add_boneIndices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> boneIndices) {
    fbb_.AddOffset(ResMesh::VT_BONEINDICES, boneIndices);
  }
  void add_boneWeights(flatbuffers::Offset<flatbuffers::Vector<float>> boneWeights) {
    fbb_.AddOffset(ResMesh::VT_BONEWEIGHTS, boneWeights);
  }
  void add_vertexIndices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> vertexIndices) {
    fbb_.AddOffset(ResMesh::VT_VERTEXINDICES, vertexIndices);
  }
  void add_materialId(uint32_t materialId) {
    fbb_.AddElement<uint32_t>(ResMesh::VT_MATERIALID, materialId, 0);
  }
  void add_boneStride(uint32_t boneStride) {
    fbb_.AddElement<uint32_t>(ResMesh::VT_BONESTRIDE, boneStride, 0);
  }
  explicit ResMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ResMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResMesh> CreateResMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> positions = 0,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> normals = 0,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float2 *>> texCoords = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> boneIndices = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> boneWeights = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> vertexIndices = 0,
    uint32_t materialId = 0,
    uint32_t boneStride = 0) {
  ResMeshBuilder builder_(_fbb);
  builder_.add_boneStride(boneStride);
  builder_.add_materialId(materialId);
  builder_.add_vertexIndices(vertexIndices);
  builder_.add_boneWeights(boneWeights);
  builder_.add_boneIndices(boneIndices);
  builder_.add_texCoords(texCoords);
  builder_.add_normals(normals);
  builder_.add_positions(positions);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResMesh> CreateResMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<asdx::res::Float3> *positions = nullptr,
    const std::vector<asdx::res::Float3> *normals = nullptr,
    const std::vector<asdx::res::Float2> *texCoords = nullptr,
    const std::vector<uint32_t> *boneIndices = nullptr,
    const std::vector<float> *boneWeights = nullptr,
    const std::vector<uint32_t> *vertexIndices = nullptr,
    uint32_t materialId = 0,
    uint32_t boneStride = 0) {
  auto positions__ = positions ? _fbb.CreateVectorOfStructs<asdx::res::Float3>(*positions) : 0;
  auto normals__ = normals ? _fbb.CreateVectorOfStructs<asdx::res::Float3>(*normals) : 0;
  auto texCoords__ = texCoords ? _fbb.CreateVectorOfStructs<asdx::res::Float2>(*texCoords) : 0;
  auto boneIndices__ = boneIndices ? _fbb.CreateVector<uint32_t>(*boneIndices) : 0;
  auto boneWeights__ = boneWeights ? _fbb.CreateVector<float>(*boneWeights) : 0;
  auto vertexIndices__ = vertexIndices ? _fbb.CreateVector<uint32_t>(*vertexIndices) : 0;
  return asdx::res::CreateResMesh(
      _fbb,
      positions__,
      normals__,
      texCoords__,
      boneIndices__,
      boneWeights__,
      vertexIndices__,
      materialId,
      boneStride);
}

struct ResModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MESHES = 6,
    VT_MATERIALS = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<asdx::res::ResMesh>> *meshes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<asdx::res::ResMesh>> *>(VT_MESHES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *materials() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MATERIALS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_MESHES) &&
           verifier.VerifyVector(meshes()) &&
           verifier.VerifyVectorOfTables(meshes()) &&
           VerifyOffset(verifier, VT_MATERIALS) &&
           verifier.VerifyVector(materials()) &&
           verifier.VerifyVectorOfStrings(materials()) &&
           verifier.EndTable();
  }
};

struct ResModelBuilder {
  typedef ResModel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ResModel::VT_NAME, name);
  }
  void add_meshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<asdx::res::ResMesh>>> meshes) {
    fbb_.AddOffset(ResModel::VT_MESHES, meshes);
  }
  void add_materials(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> materials) {
    fbb_.AddOffset(ResModel::VT_MATERIALS, materials);
  }
  explicit ResModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ResModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResModel>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResModel> CreateResModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<asdx::res::ResMesh>>> meshes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> materials = 0) {
  ResModelBuilder builder_(_fbb);
  builder_.add_materials(materials);
  builder_.add_meshes(meshes);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResModel> CreateResModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<asdx::res::ResMesh>> *meshes = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *materials = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto meshes__ = meshes ? _fbb.CreateVector<flatbuffers::Offset<asdx::res::ResMesh>>(*meshes) : 0;
  auto materials__ = materials ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*materials) : 0;
  return asdx::res::CreateResModel(
      _fbb,
      name__,
      meshes__,
      materials__);
}

inline const asdx::res::ResModel *GetResModel(const void *buf) {
  return flatbuffers::GetRoot<asdx::res::ResModel>(buf);
}

inline const asdx::res::ResModel *GetSizePrefixedResModel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<asdx::res::ResModel>(buf);
}

inline bool VerifyResModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<asdx::res::ResModel>(nullptr);
}

inline bool VerifySizePrefixedResModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<asdx::res::ResModel>(nullptr);
}

inline void FinishResModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<asdx::res::ResModel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<asdx::res::ResModel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace res
}  // namespace asdx

#endif  // FLATBUFFERS_GENERATED_MESH_ASDX_RES_H_
