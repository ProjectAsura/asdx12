// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESH_ASDX_RES_H_
#define FLATBUFFERS_GENERATED_MESH_ASDX_RES_H_

#include "flatbuffers/flatbuffers.h"

#include "base_format.h"

namespace asdx {
namespace res {

struct Mesh;
struct MeshBuilder;

struct Model;
struct ModelBuilder;

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_NORMALS = 6,
    VT_TANGENTS = 8,
    VT_TEXCOORDS = 10,
    VT_BONEINDICES = 12,
    VT_BONEWEIGHTS = 14,
    VT_VERTEXINDICES = 16,
    VT_MATERIALID = 18,
    VT_BONESTRIDE = 20
  };
  const flatbuffers::Vector<const asdx::res::Float3 *> *Positions() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float3 *> *>(VT_POSITIONS);
  }
  const flatbuffers::Vector<const asdx::res::Float3 *> *Normals() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float3 *> *>(VT_NORMALS);
  }
  const flatbuffers::Vector<const asdx::res::Float3 *> *Tangents() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float3 *> *>(VT_TANGENTS);
  }
  const flatbuffers::Vector<const asdx::res::Float2 *> *TexCoords() const {
    return GetPointer<const flatbuffers::Vector<const asdx::res::Float2 *> *>(VT_TEXCOORDS);
  }
  const flatbuffers::Vector<uint32_t> *BoneIndices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_BONEINDICES);
  }
  const flatbuffers::Vector<float> *BoneWeights() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_BONEWEIGHTS);
  }
  const flatbuffers::Vector<uint32_t> *VertexIndices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_VERTEXINDICES);
  }
  uint32_t MaterialId() const {
    return GetField<uint32_t>(VT_MATERIALID, 0);
  }
  uint32_t BoneStride() const {
    return GetField<uint32_t>(VT_BONESTRIDE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(Positions()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.VerifyVector(Normals()) &&
           VerifyOffset(verifier, VT_TANGENTS) &&
           verifier.VerifyVector(Tangents()) &&
           VerifyOffset(verifier, VT_TEXCOORDS) &&
           verifier.VerifyVector(TexCoords()) &&
           VerifyOffset(verifier, VT_BONEINDICES) &&
           verifier.VerifyVector(BoneIndices()) &&
           VerifyOffset(verifier, VT_BONEWEIGHTS) &&
           verifier.VerifyVector(BoneWeights()) &&
           VerifyOffset(verifier, VT_VERTEXINDICES) &&
           verifier.VerifyVector(VertexIndices()) &&
           VerifyField<uint32_t>(verifier, VT_MATERIALID) &&
           VerifyField<uint32_t>(verifier, VT_BONESTRIDE) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Positions(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> Positions) {
    fbb_.AddOffset(Mesh::VT_POSITIONS, Positions);
  }
  void add_Normals(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> Normals) {
    fbb_.AddOffset(Mesh::VT_NORMALS, Normals);
  }
  void add_Tangents(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> Tangents) {
    fbb_.AddOffset(Mesh::VT_TANGENTS, Tangents);
  }
  void add_TexCoords(flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float2 *>> TexCoords) {
    fbb_.AddOffset(Mesh::VT_TEXCOORDS, TexCoords);
  }
  void add_BoneIndices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> BoneIndices) {
    fbb_.AddOffset(Mesh::VT_BONEINDICES, BoneIndices);
  }
  void add_BoneWeights(flatbuffers::Offset<flatbuffers::Vector<float>> BoneWeights) {
    fbb_.AddOffset(Mesh::VT_BONEWEIGHTS, BoneWeights);
  }
  void add_VertexIndices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> VertexIndices) {
    fbb_.AddOffset(Mesh::VT_VERTEXINDICES, VertexIndices);
  }
  void add_MaterialId(uint32_t MaterialId) {
    fbb_.AddElement<uint32_t>(Mesh::VT_MATERIALID, MaterialId, 0);
  }
  void add_BoneStride(uint32_t BoneStride) {
    fbb_.AddElement<uint32_t>(Mesh::VT_BONESTRIDE, BoneStride, 0);
  }
  explicit MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> Positions = 0,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> Normals = 0,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float3 *>> Tangents = 0,
    flatbuffers::Offset<flatbuffers::Vector<const asdx::res::Float2 *>> TexCoords = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> BoneIndices = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> BoneWeights = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> VertexIndices = 0,
    uint32_t MaterialId = 0,
    uint32_t BoneStride = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_BoneStride(BoneStride);
  builder_.add_MaterialId(MaterialId);
  builder_.add_VertexIndices(VertexIndices);
  builder_.add_BoneWeights(BoneWeights);
  builder_.add_BoneIndices(BoneIndices);
  builder_.add_TexCoords(TexCoords);
  builder_.add_Tangents(Tangents);
  builder_.add_Normals(Normals);
  builder_.add_Positions(Positions);
  return builder_.Finish();
}

inline flatbuffers::Offset<Mesh> CreateMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<asdx::res::Float3> *Positions = nullptr,
    const std::vector<asdx::res::Float3> *Normals = nullptr,
    const std::vector<asdx::res::Float3> *Tangents = nullptr,
    const std::vector<asdx::res::Float2> *TexCoords = nullptr,
    const std::vector<uint32_t> *BoneIndices = nullptr,
    const std::vector<float> *BoneWeights = nullptr,
    const std::vector<uint32_t> *VertexIndices = nullptr,
    uint32_t MaterialId = 0,
    uint32_t BoneStride = 0) {
  auto Positions__ = Positions ? _fbb.CreateVectorOfStructs<asdx::res::Float3>(*Positions) : 0;
  auto Normals__ = Normals ? _fbb.CreateVectorOfStructs<asdx::res::Float3>(*Normals) : 0;
  auto Tangents__ = Tangents ? _fbb.CreateVectorOfStructs<asdx::res::Float3>(*Tangents) : 0;
  auto TexCoords__ = TexCoords ? _fbb.CreateVectorOfStructs<asdx::res::Float2>(*TexCoords) : 0;
  auto BoneIndices__ = BoneIndices ? _fbb.CreateVector<uint32_t>(*BoneIndices) : 0;
  auto BoneWeights__ = BoneWeights ? _fbb.CreateVector<float>(*BoneWeights) : 0;
  auto VertexIndices__ = VertexIndices ? _fbb.CreateVector<uint32_t>(*VertexIndices) : 0;
  return asdx::res::CreateMesh(
      _fbb,
      Positions__,
      Normals__,
      Tangents__,
      TexCoords__,
      BoneIndices__,
      BoneWeights__,
      VertexIndices__,
      MaterialId,
      BoneStride);
}

struct Model FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MESHES = 6,
    VT_MATERIALS = 8
  };
  const flatbuffers::String *Name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<asdx::res::Mesh>> *Meshes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<asdx::res::Mesh>> *>(VT_MESHES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *Materials() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MATERIALS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyOffset(verifier, VT_MESHES) &&
           verifier.VerifyVector(Meshes()) &&
           verifier.VerifyVectorOfTables(Meshes()) &&
           VerifyOffset(verifier, VT_MATERIALS) &&
           verifier.VerifyVector(Materials()) &&
           verifier.VerifyVectorOfStrings(Materials()) &&
           verifier.EndTable();
  }
};

struct ModelBuilder {
  typedef Model Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Name(flatbuffers::Offset<flatbuffers::String> Name) {
    fbb_.AddOffset(Model::VT_NAME, Name);
  }
  void add_Meshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<asdx::res::Mesh>>> Meshes) {
    fbb_.AddOffset(Model::VT_MESHES, Meshes);
  }
  void add_Materials(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> Materials) {
    fbb_.AddOffset(Model::VT_MATERIALS, Materials);
  }
  explicit ModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Model>(end);
    return o;
  }
};

inline flatbuffers::Offset<Model> CreateModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<asdx::res::Mesh>>> Meshes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> Materials = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_Materials(Materials);
  builder_.add_Meshes(Meshes);
  builder_.add_Name(Name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Model> CreateModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Name = nullptr,
    const std::vector<flatbuffers::Offset<asdx::res::Mesh>> *Meshes = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *Materials = nullptr) {
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  auto Meshes__ = Meshes ? _fbb.CreateVector<flatbuffers::Offset<asdx::res::Mesh>>(*Meshes) : 0;
  auto Materials__ = Materials ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*Materials) : 0;
  return asdx::res::CreateModel(
      _fbb,
      Name__,
      Meshes__,
      Materials__);
}

inline const asdx::res::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<asdx::res::Model>(buf);
}

inline const asdx::res::Model *GetSizePrefixedModel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<asdx::res::Model>(buf);
}

inline bool VerifyModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<asdx::res::Model>(nullptr);
}

inline bool VerifySizePrefixedModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<asdx::res::Model>(nullptr);
}

inline void FinishModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<asdx::res::Model> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<asdx::res::Model> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace res
}  // namespace asdx

#endif  // FLATBUFFERS_GENERATED_MESH_ASDX_RES_H_
