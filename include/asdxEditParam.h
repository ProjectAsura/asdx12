//-----------------------------------------------------------------------------
// File : asdxEditParam.h
// Desc : Edit Parameter.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <asdxMath.h>
#include <asdxHistory.h>

#ifdef ASDX_ENABLE_TINYXML2
#include <tinyxml2.h>


#ifndef ASDX_TO_STR
#define ASDX_TO_STR(x) #x
#endif//ASDX_TO_STR

#ifndef ASDX_XML_SERIALIZE
#define ASDX_XML_SERIALIZE(doc, var) \
    var.Serialize(doc, ASDX_TO_STR(var))
#endif//ASDX_XML_SERIALIZE

#ifndef ASDX_XML_DESERIALIZE
#define ASDX_XML_DESERIALIZE_E(elem, var) \
    var.Deserialize(elem, ASDX_TO_STR(var))
#endif//ASDX_XML_DESERIALIZE

#ifndef ASDX_XML_PUSH_BACK
#define ASDX_XML_PUSH_BACK(doc, elem, var) \
    elem->InsertEndChild(ASDX_ELEMENT_SERIALIZE(doc, var))
#endif//ASDX_XML_PUSH_BACK

#ifndef ASDX_XML_PUSH_FRONT
#define ASDX_XML_PUSH_FRONT(doc, elem, var) \
    elem->InsertFirstChild(ASDX_ELEMENT_SERIALIZE(doc, var))
#endif//ASDX_XML_PUSH_FRONT


#endif//ASDX_ENABLE_TINYXML2


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// EditBool class
///////////////////////////////////////////////////////////////////////////////
class EditBool
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      tag     データ識別用タグ名です.
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditBool(bool value = false);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(bool value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    bool GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const bool* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(bool next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示ラベル名.
        //---------------------------------------------------------------------
        void DrawCheckbox(const char* label);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    bool        m_Value;    //!< 値です.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// EditInt class
///////////////////////////////////////////////////////////////////////////////
class EditInt
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditInt(int value = 0);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(int value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    int GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const int* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(int next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawSlider(const char* label, int step = 1, int mini = 0, int maxi = 0);

        //---------------------------------------------------------------------
        //! @brief      コンボボックスを描画します.
        //!
        //! @param[in]      label       表示名.
        //! @param[in]      count       アイテム数.
        //! @param[in]      items       アイテム名.
        //---------------------------------------------------------------------
        void DrawCombo(const char* label, int count, const char** items);

        //----------------------------------------------------------------------
        //! @brief      コンボボックスを描画します.
        //!
        //! @param[in]      label           表示名.
        //! @param[in]      items_getter    アイテム取得関数.
        //! @param[in]      count           アイテム数.
        //---------------------------------------------------------------------
        void DrawCombo(const char* label, bool (*items_getter)(void* data, int idx, const char** out_text), int count);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    int         m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        int         m_Prev;     //!< 前の値.
        bool        m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditFloat class
///////////////////////////////////////////////////////////////////////////////
class EditFloat
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditFloat(float value = 0);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(float value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    float GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const float* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(float next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawSlider(const char* label, float step = 0.1f, float mini = 0.0f, float maxi = 0.0f);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    float       m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        float       m_Prev;     //!< 前の値.
        bool        m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditFloat2 class
///////////////////////////////////////////////////////////////////////////////
class EditFloat2
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditFloat2(float x = 0.0f, float y = 0.0f);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(const asdx::Vector2& value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector2& GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector2* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(const asdx::Vector2& next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawSlider(const char* label, float step = 0.1f, float mini = 0.0f, float maxi = 0.0f);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::Vector2   m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        asdx::Vector2   m_Prev;     //!< 前の値.
        bool            m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditFloat3 class
///////////////////////////////////////////////////////////////////////////////
class EditFloat3
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditFloat3(float x = 0.0f, float y = 0.0f, float z = 0.0f);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(const asdx::Vector3& value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector3& GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector3* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(const asdx::Vector3& next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawSlider(const char* label, float step = 0.1f, float mini = 0.0f, float maxi = 0.0f);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::Vector3   m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        asdx::Vector3   m_Prev;     //!< 前の値.
        bool            m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// EditFloat4 class
///////////////////////////////////////////////////////////////////////////////
class EditFloat4
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditFloat4(float x = 0.0f, float y = 0.0f, float z = 0.0f, float w = 0.0f);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(const asdx::Vector4& value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector4& GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector4* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(const asdx::Vector4& next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawSlider(const char* label, float step = 0.1f, float mini = 0.0f, float maxi = 0.0f);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::Vector4   m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        asdx::Vector4   m_Prev;     //!< 前の値.
        bool            m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditColor3 class
///////////////////////////////////////////////////////////////////////////////
class EditColor3
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditColor3(float r = 0.0f, float g = 0.0f, float b = 0.0f);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(const asdx::Vector3& value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector3& GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector3* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(const asdx::Vector3& next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawPicker(const char* label);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    const char*     m_Tag;      //!< 識別用タグです.
    asdx::Vector3   m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        asdx::Vector3   m_Prev;     //!< 前の値.
        bool            m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditColor4 class
///////////////////////////////////////////////////////////////////////////////
class EditColor4
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      value   初期値です.
    //-------------------------------------------------------------------------
    EditColor4(float r = 0.0f, float g = 0.0f, float b = 0.0f, float a = 1.0f);

    //-------------------------------------------------------------------------
    //! @brief      値を設定します.
    //!
    //! @param[in]      value       設定する値です.
    //! @param[in]      history     ヒストリー登録する場合は true を指定.
    //-------------------------------------------------------------------------
    void SetValue(const asdx::Vector4& value, bool history = false);

    //-------------------------------------------------------------------------
    //! @brief      値を取得します.
    //!
    //! @return     値を返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector4& GetValue() const;

    //-------------------------------------------------------------------------
    //! @brief      値へのポインタを取得します.
    //!
    //! @return     値へのポインタを返却します.
    //-------------------------------------------------------------------------
    const asdx::Vector4* GetValuePtr() const;

    //-------------------------------------------------------------------------
    //! @brief      グループヒストリー用履歴を作成します.
    //!
    //! @param[in]      nexe        次に設定する値.
    //! @return     生成した履歴を返却します.
    //-------------------------------------------------------------------------
    asdx::IHistory* CreateHistory(const asdx::Vector4& next);

    #ifdef ASDX_ENABLE_IMGUI
        //---------------------------------------------------------------------
        //! @brief      描画します.
        //!
        //! @param[in]      label       表示名.
        //---------------------------------------------------------------------
        void DrawPicker(const char* label);
    #endif

    #ifdef ASDX_ENABLE_TINYXML2
        //---------------------------------------------------------------------
        //! @brief      XML要素を生成します.
        //!
        //! @param[in]      doc         XMLドキュメント.
        //! @return     生成されたXML要素を返却します.
        //---------------------------------------------------------------------
        tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc, const char* tag);

        //---------------------------------------------------------------------
        //! @brief      XML要素を読み取ります.
        //!
        //! @param[in]      element     XML要素.
        //---------------------------------------------------------------------
        void Deserialize(tinyxml2::XMLElement* element, const char* tag);
    #endif//ASDX_ENABLE_TINYXML2

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::Vector4   m_Value;    //!< 値です.

    #ifdef ASDX_ENABLE_IMGUI
        asdx::Vector4   m_Prev;     //!< 前の値.
        bool            m_Dragged;  //!< ドラッグ中かどうか?
    #endif//ASDX_ENABLE_IMGUI

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx
