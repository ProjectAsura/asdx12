//-----------------------------------------------------------------------------
// File : asdxMaterial.h
// Desc : Material.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <map>
#include <fnd/asdxMath.h>
#include <res/asdxResMaterial.h>
#include <gfx/asdxConstantBuffer.h>
#include <gfx/asdxTexture.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// MaterialTexture structure
///////////////////////////////////////////////////////////////////////////////
struct MaterialTexture
{
    TEXTURE_USAGE               Usage;
    const IShaderResourceView*  pSRV;
};

///////////////////////////////////////////////////////////////////////////////
// Material class
///////////////////////////////////////////////////////////////////////////////
class Material
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Material();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Material();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(const ResMaterial& value);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      マテリアル名ハッシュを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetHash() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルステートを取得します.
    //-------------------------------------------------------------------------
    MATERIAL_STATE GetState() const;

    //-------------------------------------------------------------------------
    //! @brief      表示面を取得します.
    //-------------------------------------------------------------------------
    DISPLAY_FACE GetDisplayFace() const;

    //-------------------------------------------------------------------------
    //! @brief      キャストシャドウフラグを取得します.
    //-------------------------------------------------------------------------
    bool CastShadow() const;

    //-------------------------------------------------------------------------
    //! @brief      シャドウレシーブフラグを取得します.
    //-------------------------------------------------------------------------
    bool ReceiveShadow() const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, bool value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, int value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, float value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, uint32_t value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, const Vector2& value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, const Vector3& value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを設定します.
    //-------------------------------------------------------------------------
    void SetParam(uint32_t hash, const Vector4& value);

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    bool GetBool(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    int GetInt(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    float GetFloat(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetUint(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    Vector2 GetVector2(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    Vector3 GetVector3(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      パラメータを取得します.
    //-------------------------------------------------------------------------
    Vector4 GetVector4(uint32_t hash) const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファビューを取得します.
    //-------------------------------------------------------------------------
    IConstantBufferView* GetCBV() const;

    //-------------------------------------------------------------------------
    //! @brief      テクスチャ数を取得します.
    //-------------------------------------------------------------------------
    uint32_t GetTextureCount() const;

    //-------------------------------------------------------------------------
    //! @brief      テクスチャを取得します.
    //-------------------------------------------------------------------------
    MaterialTexture GetTexture(uint32_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファを更新します.
    //-------------------------------------------------------------------------
    void Update();

private:
    ///////////////////////////////////////////////////////////////////////////
    // TextureHolder structure
    ///////////////////////////////////////////////////////////////////////////
    struct TextureHolder
    {
        TEXTURE_USAGE   Usage;
        Texture         Texture;
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t        m_Hash;               //!< マテリアル名を表すハッシュ値です.
    MATERIAL_STATE  m_State;              //!< マテリアルステートです.
    DISPLAY_FACE    m_DisplayFace;        //!< 表示面設定です.
    bool            m_ShadowCast;         //!< シャドウキャスト.
    bool            m_ShadowReceive;      //!< シャドウレシーブ.
    bool            m_Dirty;

    std::map<uint32_t, ResMaterialParameter>    m_Params;
    std::vector<uint8_t>                        m_Buffer;
    std::vector<TextureHolder>                  m_Textures;
    ConstantBuffer                              m_CB;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx