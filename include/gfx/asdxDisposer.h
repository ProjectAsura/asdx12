//-----------------------------------------------------------------------------
// File : asdxDisposer.h
// Desc : Object Disposer.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <list>
#include <fnd/asdxRef.h>
#include <fnd/asdxSpinLock.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Disposer class
///////////////////////////////////////////////////////////////////////////////
template<typename T>
class Disposer
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    static constexpr uint8_t kDefaultLifeTime = 4;    // 4フレーム分

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Disposer()
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Disposer()
    { Clear(); }

    //-------------------------------------------------------------------------
    //! @brief      オブジェクトを登録します.
    //!
    //! @param[in]      pObject     登録するオブジェクト.
    //! @param[in]      lifeTime    生存フレーム数.
    //-------------------------------------------------------------------------
    void Push(T*& pObject, uint8_t lifeTime = kDefaultLifeTime)
    {
        if (pObject == nullptr)
        { return; }

        asdx::ScopedLock locker(&m_SpinLock);

        Item item;
        item.pObject    = pObject;
        item.LifeTime   = lifeTime;
        m_List.push_back(item);

        pObject = nullptr;
    }

    //-------------------------------------------------------------------------
    //! @brief      フレーム同期し，遅延解放を実行します.
    //-------------------------------------------------------------------------
    void FrameSync()
    {
        asdx::ScopedLock locker(&m_SpinLock);

        auto itr = m_List.begin();
        while(itr != m_List.end())
        {
            --itr->LifeTime;
            if (itr->LifeTime <= 0)
            {
                if (itr->pObject != nullptr)
                {
                    itr->pObject->Release();
                    itr->pObject = nullptr;
                }

                itr = m_List.erase(itr);
            }
            else
            {
                ++itr;
            }
        }
    }

    //-------------------------------------------------------------------------
    //! @brief      強制破棄を実行します.
    //-------------------------------------------------------------------------
    void Clear()
    {
        asdx::ScopedLock locker(&m_SpinLock);

        auto itr = m_List.begin();
        while(itr != m_List.end())
        {
            if (itr->pObject != nullptr)
            {
                // GPUが実行中 or メモリ解法漏れ があるとここで落ちるはずなので，
                // 終了処理に問題がないか再チェックしようね!
                itr->pObject->Release();
                itr->pObject = nullptr;
                itr->LifeTime  = 0;
            }

            itr = m_List.erase(itr);
        }

        // 念のため.
        m_List.clear();
    }

private:
    ///////////////////////////////////////////////////////////////////////////
    // Item structure
    ///////////////////////////////////////////////////////////////////////////
    struct Item
    {
        T*          pObject;    //!< 破棄オブジェクト.
        uint8_t     LifeTime;   //!< 生存フレーム数.
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    std::list<Item>         m_List;         //!< 破棄リスト.
    SpinLock                m_SpinLock;     //!< スピンロック.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx
