//-----------------------------------------------------------------------------
// File : asdxDescriptor.h
// Desc : Descriptor.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <atomic>
#include <d3d12.h>
#include <fnd/asdxRef.h>
#include <fnd/asdxList.h>


namespace asdx {

//-----------------------------------------------------------------------------
// Forward Declaration.
//-----------------------------------------------------------------------------
class DescriptorHeap;

///////////////////////////////////////////////////////////////////////////////
// Descriptor class
///////////////////////////////////////////////////////////////////////////////
class Descriptor : public IReference, public List<Descriptor>::Node
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    friend class DescriptorHeap;

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //-------------------------------------------------------------------------
    void AddRef() override;

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    void Release() override;

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetCount() const override;

    //-------------------------------------------------------------------------
    //! @brief      CPUディスクリプタハンドルを取得します.
    //-------------------------------------------------------------------------
    D3D12_CPU_DESCRIPTOR_HANDLE GetHandleCPU() const;

    //-------------------------------------------------------------------------
    //! @brief      GPUディスクリプタハンドルを取得します.
    //-------------------------------------------------------------------------
    D3D12_GPU_DESCRIPTOR_HANDLE GetHandleGPU() const;

    //-------------------------------------------------------------------------
    //! @brief      インデックスを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetIndex() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    DescriptorHeap*             m_pHeap;        //!< ヒープへのポインタです.
    D3D12_CPU_DESCRIPTOR_HANDLE m_HandleCPU;    //!< CPUディスクリプタハンドルです.
    D3D12_GPU_DESCRIPTOR_HANDLE m_HandleGPU;    //!< GPUディスクリプタハンドルです.
    uint32_t                    m_Index;        //!< ディスクリプタインデックス.
    std::atomic<uint32_t>       m_RefCount;     //!< 参照カウンタです.

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Descriptor();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Descriptor();

    Descriptor      (const Descriptor&) = delete;
    void operator = (const Descriptor&) = delete;
};


///////////////////////////////////////////////////////////////////////////////
// DescriptorHeap class
///////////////////////////////////////////////////////////////////////////////
class DescriptorHeap
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    friend class Descriptor;

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    DescriptorHeap();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~DescriptorHeap();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(ID3D12Device* pDevice, const D3D12_DESCRIPTOR_HEAP_DESC* pDesc);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      ディスクリプタを生成します.
    //!
    //! @return     生成したディスクリプタを返却します. 生成に失敗した場合は nullptr が返却されます.
    //-------------------------------------------------------------------------
    Descriptor* Alloc();

    //-------------------------------------------------------------------------
    //! @brief      利用可能なハンドル数を取得します.
    //!
    //! @return     利用可能なハンドル数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetAvailableCount() const;

    //-------------------------------------------------------------------------
    //! @brief      割り当て済みハンドル数を取得します.
    //!
    //! @return     割り当て済みハンドル数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetAllocatedCount() const;

    //-------------------------------------------------------------------------
    //! @brief      ハンドル総数を取得します.
    //!
    //! @return     ハンドル総数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetHandleCount() const;

    //-------------------------------------------------------------------------
    //! @brief      ディスクリプタヒープを取得します.
    //-------------------------------------------------------------------------
    ID3D12DescriptorHeap* GetD3D12DescriptorHeap() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    ID3D12DescriptorHeap*   m_pHeap;            //!< ディスクリプタヒープです.
    List<Descriptor>        m_UsedList;         //!< 使用中リスト.
    List<Descriptor>        m_FreeList;         //!< 未使用リスト.
    Descriptor*             m_Descriptors;      //!< ディスクリプタ.
    uint32_t                m_IncrementSize;    //!< インクリメントサイズです.

    //=========================================================================
    // private methods.
    //=========================================================================
    void Free(Descriptor* pValue);

    DescriptorHeap  (const DescriptorHeap&) = delete;
    void operator = (const DescriptorHeap&) = delete;
};

} // namespace a3d
