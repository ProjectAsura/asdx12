//-----------------------------------------------------------------------------
// File : asdxModel.h
// Desc : Model.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <res/asdxResModel.h>
#include <gfx/asdxVertexBuffer.h>
#include <gfx/asdxIndexBuffer.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// BoundingBox structure
///////////////////////////////////////////////////////////////////////////////
struct BoundingBox
{
    asdx::Vector3   Mini;
    asdx::Vector3   Maxi;
};

///////////////////////////////////////////////////////////////////////////////
// Mesh class
///////////////////////////////////////////////////////////////////////////////
class Mesh
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Mesh();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Mesh();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      resource        スタティックメッシュリソースです.
    //! @retval true    初期化成功.
    //! @retval false   初期化失敗.
    //-------------------------------------------------------------------------
    bool Init(const ResMesh& resource);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      頂点データを取得します.
    //!
    //! @return     頂点データを返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetPositions() const;

    //-------------------------------------------------------------------------
    //! @brief      法線ベクトルを取得します.
    //!
    //! @return     法線ベクトルを返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetNormals() const;

    //-------------------------------------------------------------------------
    //! @brief      接線ベクトルを取得します.
    //! 
    //! @return     接線ベクトルを返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetTangents() const;

    //-------------------------------------------------------------------------
    //! @brief      頂点カラーを取得します.
    //!
    //! @return     頂点カラー返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetColors() const;

    //-------------------------------------------------------------------------
    //! @brief      テクスチャ座標を取得します.
    //!
    //! @return     テクスチャ座標を返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetTexCoords(uint8_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      ボーン番号を取得します.
    //!
    //! @return     ボーン番号を返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetBoneIndices() const;

    //-------------------------------------------------------------------------
    //! @brief      ボーン重みを取得します.
    //!
    //! @return     ボーン重みを返却します.
    //-------------------------------------------------------------------------
    const VertexBuffer& GetBoneWeights() const;

    //-------------------------------------------------------------------------
    //! @brief      インデックスデータを取得します.
    //!
    //! @return     インデックスデータを返却します.
    //-------------------------------------------------------------------------
    const IndexBuffer& GetIndices() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュハッシュを取得します.
    //!
    //! @return     メッシュハッシュを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMeshHash() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルIDを取得します.
    //!
    //! @return     マテリアルIDを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMaterialId() const;

    //-------------------------------------------------------------------------
    //! @brief      1頂点あたりのボーンの重み数を取得します.
    //! 
    //! @return     1頂点あたりのボーンの重み数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetBoneWeightStride() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //!
    //! @return     バウンディングボックスを返却します.
    //-------------------------------------------------------------------------
    const BoundingBox& GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      接線ベクトルを持つかどうか?
    //!
    //! @retval true    接線ベクトルを持ちます.
    //! @retval false   接線ベクトルを持ちません.
    //-------------------------------------------------------------------------
    bool HasTangent() const;

    //-------------------------------------------------------------------------
    //! @brief      頂点カラーをもつかどうか?
    //!
    //! @retval true    頂点カラーを持ちます.
    //! @retval false   頂点カラーを持ちません.
    //------------------------------------------------------------------------
    bool HasColor() const;

    //-------------------------------------------------------------------------
    //! @brief      テクスチャ座標を持つかどうか.
    //!
    //! @param[in]      index       テクスチャ座標チャンネル.
    //! @retval true    テクスチャ座標を持ちます.
    //! @retval false   テクスチャ座標を持ちません.
    //-------------------------------------------------------------------------
    bool HasTexCoord(uint8_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      ボーンを持つかどうか?
    //!
    //! @retval true    ボーンを持ちます.
    //! @retval false   ボーンを持ちません.
    //-------------------------------------------------------------------------
    bool HasBone() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t            m_MeshHash;
    uint32_t            m_MaterialId;
    uint32_t            m_BoneWeightStride; // 1頂点あたりのボーンの重み数.
    BoundingBox         m_Box;
    VertexBuffer        m_Positions;
    VertexBuffer        m_Normals;
    VertexBuffer        m_Tangents;
    VertexBuffer        m_Colors;
    VertexBuffer        m_TexCoords[4];
    VertexBuffer        m_BoneIndices;
    VertexBuffer        m_BoneWeights;
    IndexBuffer         m_Indices;


    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// Model class
///////////////////////////////////////////////////////////////////////////////
class Model
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Model();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Model();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      model       モデルリソースです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(const ResModel& model);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      モデルハッシュを取得します.
    //! 
    //! @return     モデルハッシュを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetModelHash() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュ数を取得します.
    //!
    //! @return     メッシュ数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMeshCount() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュを取得します.
    //!
    //! @param[in]      index       メッシュ番号です.
    //! @return     指定されたメッシュを返却します.
    //-------------------------------------------------------------------------
    const Mesh& GetMesh(uint32_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //!
    //! @return     バウンディングボックスを返却します.
    //-------------------------------------------------------------------------
    const BoundingBox& GetBox() const;

private:
    //=========================================================================
    // private variables
    //=========================================================================
    uint32_t            m_ModelHash;
    BoundingBox         m_Box;
    std::vector<Mesh>   m_Meshes;
    
    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx
