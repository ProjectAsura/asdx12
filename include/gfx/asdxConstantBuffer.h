//-----------------------------------------------------------------------------
// File : asdxConstantBuffer.h
// Desc : Constant Buffer Wrapper.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <asdxView.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// ConstantBuffer class
///////////////////////////////////////////////////////////////////////////////
class ConstantBuffer
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ConstantBuffer();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~ConstantBuffer();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      size        バッファサイズです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(uint64_t size);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      更新処理を行います.
    //!
    //! @param[in]      pSrc        入力データへのポインタ.
    //! @param[in]      size        コピーサイズ.
    //! @param[in]      srcOffset   入力データのオフセット.
    //! @param[in]      dstOffset   書き込み先のオフセット.
    //-------------------------------------------------------------------------
    void Update(const void* pSrc, uint64_t size, uint64_t srcOffset = 0, uint64_t dstOffset = 0);

    //-------------------------------------------------------------------------
    //! @brief      リソースを取得します.
    //-------------------------------------------------------------------------
    ID3D12Resource* GetResource() const;

    //-------------------------------------------------------------------------
    //! @brief      リソースを取得します.
    //-------------------------------------------------------------------------
    ID3D12Resource* GetResource(uint32_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファビューを取得します.
    //-------------------------------------------------------------------------
    IConstantBufferView* GetView() const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファビューを取得します.
    //-------------------------------------------------------------------------
    IConstantBufferView* GetView(uint32_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      バッファを入れ替えます.
    //-------------------------------------------------------------------------
    void SwapBuffer();

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを行います
    //-------------------------------------------------------------------------
    void* Map(uint32_t index);

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを解除します.
    //-------------------------------------------------------------------------
    void Unmap(uint32_t index);

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを行います
    //-------------------------------------------------------------------------
    inline void* Map()
    { return Map(m_Index); }

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを解除します.
    //-------------------------------------------------------------------------
    inline void Unmap()
    { Unmap(m_Index); }

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを行います
    //-------------------------------------------------------------------------
    template<typename T>
    inline T* MapAs(uint32_t index)
    { return reinterpret_cast<T*>(Map(index)); }

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを行います
    //-------------------------------------------------------------------------
    template<typename T>
    inline T* MapAs()
    { return reinterpret_cast<T*>(Map()); }

private:
    //=========================================================================
    // private varaibles.
    //=========================================================================
    RefPtr<ID3D12Resource>      m_Resource[2];
    RefPtr<IConstantBufferView> m_View[2];
    uint8_t*                    m_Dst[2];
    uint8_t                     m_Index;
    uint64_t                    m_Size;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


} // namespace asdx
