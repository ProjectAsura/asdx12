//-----------------------------------------------------------------------------
// File : asdxQueue.h
// Desc : Command Queue Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <atomic>
#include <d3d12.h>
#include <fnd/asdxRef.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Fence class
///////////////////////////////////////////////////////////////////////////////
class Fence final
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    static constexpr uint32_t kIgnore   = 0;
    static constexpr uint32_t kInfinite = 0xFFFFFFFF;

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Fence();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Fence();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init( ID3D12Device* pDevice );

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      フェンスが指定された値に達するまで待機します.
    //!
    //! @param[in]      fenceValue      待機カウンター.
    //! @param[in]      msec            タイムアウト時間(ミリ秒).
    //-------------------------------------------------------------------------
    void Wait(UINT64 fenceValue, uint32_t msec = kInfinite);

    //-------------------------------------------------------------------------
    //! @brief      フェンスを取得します.
    //!
    //! @return     フェンスを返却します.
    //-------------------------------------------------------------------------
    ID3D12Fence* GetPtr() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    RefPtr<ID3D12Fence>     m_Fence;        //!< フェンスです.
    HANDLE                  m_Handle;       //!< イベントハンドルです.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// WaitPoint class
///////////////////////////////////////////////////////////////////////////////
class WaitPoint final
{
    //=========================================================================
    // friend classes and methods.
    //=========================================================================
    friend class CommandQueue;

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    WaitPoint();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~WaitPoint();

    //-------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //-------------------------------------------------------------------------
    WaitPoint& operator = (const WaitPoint& value);

    //-------------------------------------------------------------------------
    //! @brief      有効かどうかチェックします.
    //!
    //! @retval true    有効な値です.
    //! @retval false   無効な値です.
    //-------------------------------------------------------------------------
    bool IsValid() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    UINT64          m_FenceValue    = 0;
    ID3D12Fence*    m_pFence        = nullptr;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// CommandQueue class
///////////////////////////////////////////////////////////////////////////////
class CommandQueue : public IReference
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================
    static bool Create(ID3D12Device* pDevice, D3D12_COMMAND_LIST_TYPE type, CommandQueue** ppResult);

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //-------------------------------------------------------------------------
    void AddRef() override;

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    void Release() override;

    //-------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetCount() const override;

    //-------------------------------------------------------------------------
    //! @brief      コマンドを実行します.
    //!
    //! @param[in]      count           実行するコマンド数.
    //! @param[in]      ppList          コマンドリストの配列です.
    //-------------------------------------------------------------------------
    void Execute(uint32_t count, ID3D12CommandList** ppList);

    //-------------------------------------------------------------------------
    //! @brief      フェンスの値を更新します.
    //!
    //! @return     GPU待機点を返却します.
    //-------------------------------------------------------------------------
    WaitPoint Signal();

    //-------------------------------------------------------------------------
    //! @brief      GPUでの待機点を設定します.
    //!
    //! @param[in]      value       GPU待機点.
    //! @retval true    処理に成功.
    //! @retval false   処理に失敗.
    //-------------------------------------------------------------------------
    bool Wait(const WaitPoint& value);

    //-------------------------------------------------------------------------
    //! @brief      CPU上でコマンドの完了を待機します.
    //!
    //! @param[in]      msec        待機時間です.
    //-------------------------------------------------------------------------
    void Sync(const WaitPoint& value, uint32_t msec = Fence::kInfinite);

    //-------------------------------------------------------------------------
    //! @brief      コマンドキューを取得します.
    //!
    //! @return     コマンドキューを返却します.
    //-------------------------------------------------------------------------
    ID3D12CommandQueue* GetQueue() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    Fence                       m_Fence;        //!< フェンスです.
    RefPtr<ID3D12CommandQueue>  m_Queue;        //!< キューです.
    std::atomic<uint32_t>       m_Counter;      //!< 参照カウンターです.
    std::atomic<bool>           m_IsExecuted;   //!< 実行されたかどうか?
    UINT64                      m_FenceValue;   //!< フェンス値です.

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    CommandQueue();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~CommandQueue();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      type            コマンドリストタイプです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(ID3D12Device* pDevice, D3D12_COMMAND_LIST_TYPE type);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();
};

} // namespace asdx
