//-----------------------------------------------------------------------------
// File : asdxSprite.h
// Desc : Sprite System.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <vector>
#include <core/asdxMath.h>
#include <gfx/asdxView.h>
#include <gfx/asdxVertexBuffer.h>
#include <gfx/asdxIndexBuffer.h>
#include <gfx/asdxPipelineState.h>
#include <gfx/asdxRootSignature.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// SpriteSystem class
///////////////////////////////////////////////////////////////////////////////
class SpriteSystem
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    SpriteSystem();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~SpriteSystem();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(
        uint32_t    maxSpriteCount,
        float       width,
        float       height,
        DXGI_FORMAT colorFormat,
        DXGI_FORMAT depthFormat);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      描画処理を開始します.
    //-------------------------------------------------------------------------
    void Begin(ID3D12GraphicsCommandList* pCmd);

    //-------------------------------------------------------------------------
    //! @brief      描画処理を終了します.
    //-------------------------------------------------------------------------
    void End();

    //-------------------------------------------------------------------------
    //! @brief      シェーダリソースビューを設定します.
    //-------------------------------------------------------------------------
    void SetSRV(IShaderResourceView* pSRV);

    //-------------------------------------------------------------------------
    //! @brief      スクリーンサイズを設定します.
    //-------------------------------------------------------------------------
    void SetScreenSize(float width, float height);

    //-------------------------------------------------------------------------
    //! @brief      スクリーンサイズを設定します.
    //-------------------------------------------------------------------------
    void SetScreenSize(const Vector2& size);

    //-------------------------------------------------------------------------
    //! @brief      乗算カラーを設定します.
    //-------------------------------------------------------------------------
    void SetColor(float r, float g, float b, float a);

    //-------------------------------------------------------------------------
    //! @brief      乗算カラーを設定します.
    //-------------------------------------------------------------------------
    void SetColor(const Vector4& color);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(int x, int y, int w, int h);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(int x, int y, int w, int h, const Vector2& uv0, const Vector2& uv1);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(int x, int y, int w, int h, const int layerDepth);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(int x, int y, int w, int h, const Vector2& uv0, const Vector2& uv1, int layerDepth);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(const Vector2& pos, const Vector2& size);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(const Vector2& pos, const Vector2& size, int layerDepth);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(const Vector2& pos, const Vector2& size, const Vector2& uv0, const Vector2& uv1);

    //-------------------------------------------------------------------------
    //! @brief      スプライトを登録します.
    //-------------------------------------------------------------------------
    void Draw(const Vector2& pos, const Vector2& size, const Vector2& uv0, const Vector2& uv1, int layerDepth);

    //-------------------------------------------------------------------------
    //! @brief      スクリーンサイズを取得します.
    //-------------------------------------------------------------------------
    Vector2 GetScreenSize() const;

    //-------------------------------------------------------------------------
    //! @brief      乗算カラーを取得します.
    //-------------------------------------------------------------------------
    Vector4 GetColor() const;

    //-------------------------------------------------------------------------
    //! @brief      シェーダリソースビューを取得します.
    //-------------------------------------------------------------------------
    IShaderResourceView* GetSRV() const;

private:
    ///////////////////////////////////////////////////////////////////////////
    // Vertex structure
    ///////////////////////////////////////////////////////////////////////////
    struct Vertex
    {
        asdx::Vector3   Position;   //!< 位置座標です.
        asdx::Vector2   TexCoord;   //!< テクスチャ座標です.
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    VertexBuffer                m_VB;
    IndexBuffer                 m_IB;
    uint32_t                    m_MaxSpriteCount    = 0;
    uint32_t                    m_CurSpriteCount    = 0;
    uint32_t                    m_PreSpriteCount    = 0;
    Vector2                     m_ScreenSize        = Vector2(1920, 1080);
    Vector4                     m_Color             = Vector4(1.0f, 1.0f, 1.0f, 1.0f);
    Matrix                      m_Transform         = Matrix::CreateIdentity();
    IShaderResourceView*        m_pSRV              = nullptr;
    ID3D12GraphicsCommandList*  m_pCmd              = nullptr;
    RootSignature               m_RootSig;
    PipelineState               m_PSO;
    std::vector<Vertex>         m_Vertices;

    //=========================================================================
    // private methods.
    //=========================================================================
    SpriteSystem                (const SpriteSystem&) = delete;
    SpriteSystem& operator =    (const SpriteSystem&) = delete;

    //-------------------------------------------------------------------------
    //! @brief      ドローコールを発行します.
    //-------------------------------------------------------------------------
    void MakeCmd();
};

} // namespace asdx

