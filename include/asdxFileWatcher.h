//-----------------------------------------------------------------------------
// File : asdxFileWatcher.h
// Desc : File Wathcer.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <atomic>
#include <thread>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// IFileUpdateListener interface
///////////////////////////////////////////////////////////////////////////////
struct IFileUpdateListener
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IFileUpdateListener()
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      ファイル更新時の処理です.
    //-------------------------------------------------------------------------
    virtual void OnUpdate(
        uint32_t    actionType,
        const char* directoryPath,
        const char* relativePath) = 0;
};


///////////////////////////////////////////////////////////////////////////////
// FileWatcher class
///////////////////////////////////////////////////////////////////////////////
class FileWatcher
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////
    // Desc structure
    ///////////////////////////////////////////////////////////////////////////
    struct Desc
    {
        const char*             DirectoryPath;      //!< 監視対象ディレクトリ.
        size_t                  BufferSize;         //!< バッファサイズ.
        uint32_t                WaitTimeMsec;       //!< 1ループの待機時間(ミリ秒単位)
        IFileUpdateListener*    pListener;          //!< 変更通知先.
    };

    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    FileWatcher();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~FileWatcher();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理です.
    //!
    //! @param[in]      desc        設定です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(const Desc& desc);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::atomic<bool> m_Finish  = {};       //!< 終了フラグ.
    std::thread*      m_pThread = nullptr;  //!< 監視スレッド.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx
