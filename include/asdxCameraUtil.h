//-----------------------------------------------------------------------------
// File : asdxCameraUpdater.h
// Desc : Camera Updater Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <asdxCamera.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// CAMERA_TYPE
///////////////////////////////////////////////////////////////////////////////
enum CAMERA_TYPE
{
    CAMERA_TYPE_TARGET = 0,     //!< 注視点カメラ.
    CAMERA_TYPE_FREE   = 1,     //!< フリーカメラ.
};

///////////////////////////////////////////////////////////////////////////////
// CameraUpdate class
///////////////////////////////////////////////////////////////////////////////
class CameraUpdater
{
    //=========================================================================
    // list of friend classed and methods.
    //=========================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////
    // Gain structure
    ///////////////////////////////////////////////////////////////////////////
    struct Gain
    {
        float       Dolly;            //!< ドリー調整係数です. 
        float       Rotate;           //!< 回転調整係数です.
        float       Move;             //!< 移動調整係数です.
        float       Wheel;            //!< ホイール調整係数です.
    };

    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    CameraUpdater();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~CameraUpdater();

    //-------------------------------------------------------------------------
    //! @brief      初期設定を行います.
    //-------------------------------------------------------------------------
    void Init(
        asdx::Vector3 cameraPos,
        asdx::Vector3 cameraAim,
        asdx::Vector3 cameraUp,
        float         nearClip,
        float         farClip
    );

    //-------------------------------------------------------------------------
    //! @brief      マウスの処理です.
    //-------------------------------------------------------------------------
    void OnMouse(
        int x,
        int y,
        int wheelDelta,
        bool isLeftButtonDown,
        bool isRightButtonDown,
        bool isMiddleButtonDown,
        bool isSideButton1Down,
        bool isSideButton2Down
    );

    //-------------------------------------------------------------------------
    //! @brief      キーの処理です.
    //-------------------------------------------------------------------------
    void OnKey( uint32_t nChar, bool isKeyDown, bool isAltDown );

    //-------------------------------------------------------------------------
    //! @brief      カメラを取得します.
    //-------------------------------------------------------------------------
    Camera& GetCamera();

    //-------------------------------------------------------------------------
    //! @brief      ビュー行列を取得します.
    //-------------------------------------------------------------------------
    asdx::Matrix GetView() const;

    //-------------------------------------------------------------------------
    //! @brief      ドリー調整係数を取得します.
    //-------------------------------------------------------------------------
    float GetDollyGain() const { return m_Gain[m_Type].Dolly; }

    //-------------------------------------------------------------------------
    //! @brief      回転調整係数を取得します.
    //-------------------------------------------------------------------------
    float GetRotateGain() const { return m_Gain[m_Type].Rotate; }

    //-------------------------------------------------------------------------
    //! @brief      移動調整係数を取得します.
    //-------------------------------------------------------------------------
    float GetMoveGain() const { return m_Gain[m_Type].Move; }

    //-------------------------------------------------------------------------
    //! @brief      ホイール調整係数を取得します.
    //-------------------------------------------------------------------------
    float GetWheelGain() const { return m_Gain[m_Type].Wheel; }

    //-------------------------------------------------------------------------
    //! @brief      カメラタイプを取得します.
    //-------------------------------------------------------------------------
    CAMERA_TYPE GetType() const { return m_Type; }

    //-------------------------------------------------------------------------
    //! @brief      ドリー調整係数を設定します.
    //-------------------------------------------------------------------------
    void SetDollyGain(float value) { m_Gain[m_Type].Dolly = value; }

    //-------------------------------------------------------------------------
    //! @brief      回転調整係数を設定します.
    //-------------------------------------------------------------------------
    void SetRotateGain(float value) { m_Gain[m_Type].Rotate = value; }

    //-------------------------------------------------------------------------
    //! @brief      移動調整係数を設定します.
    //-------------------------------------------------------------------------
    void SetMoveGain(float value) { m_Gain[m_Type].Move = value; }

    //-------------------------------------------------------------------------
    //! @brief      ホイール調整係数を設定します.
    //-------------------------------------------------------------------------
    void SetWheelGain(float value) { m_Gain[m_Type].Wheel = value; }

    //-------------------------------------------------------------------------
    //! @brief      カメラタイプを設定します.
    //-------------------------------------------------------------------------
    void SetType(CAMERA_TYPE value) { m_Type = value; }

    //-------------------------------------------------------------------------
    //! @brief      調整係数をリセットします.
    //-------------------------------------------------------------------------
    void ResetGain();

protected:
    //=========================================================================
    // protected variables
    //=========================================================================
    struct MouseState
    {
        int  X;             //!< 現在のカーソルのX座標です.
        int  Y;             //!< 現在のカーソルのY座標です.
        int  prevX;         //!< 以前のカーソルのX座標です.
        int  prevY;         //!< 以前のカーソルのY座標です.
        bool isClick;       //!< 現在ボタンが押されたかどうか.
        bool isPrevClick;   //!< 以前ボタンが押されたかどうか

        //---------------------------------------------------------------------
        //! @brief      コンストラクタです.
        //---------------------------------------------------------------------
        MouseState()
        : X          ( 0 )
        , Y          ( 0 )
        , prevX      ( 0 )
        , prevY      ( 0 )
        , isClick    ( false )
        , isPrevClick( false )
        { /* DO_NOTHING */ }

        //---------------------------------------------------------------------
        //! @brief      デストラクタです.
        //---------------------------------------------------------------------
        virtual ~MouseState()
        { /* DO_NOTHING */ }

        //---------------------------------------------------------------------
        //! @brief      パラメータをリセットします.
        //---------------------------------------------------------------------
        void Reset()
        {
            X           = 0;
            Y           = 0;
            prevX       = 0;
            prevY       = 0;
            isClick     = false;
            isPrevClick = false;
        }

        //---------------------------------------------------------------------
        //! @brief      パラメータを更新します.
        //!
        //! @param [in]     x       カーソルのX座標.
        //! @param [in]     y       カーソルのY座標.
        //! @param [in]     isDown  ボタンが押されていればtrue.
        //---------------------------------------------------------------------
        void Update( int x, int y, bool isDown )
        {
            // 以前の状態を更新.
            prevX       = X;
            prevY       = Y;
            isPrevClick = isClick;

            // 現在の状態を更新.
            X           = x;
            Y           = y;
            isClick     = isDown;
        }
    };

    Camera      m_Camera;               //!< カメラです.
    MouseState  m_MouseLeft;            //!< マウスの左ボタンの状態です.
    MouseState  m_MouseRight;           //!< マウスの右ボタンの状態です.
    MouseState  m_MouseMiddle;          //!< マウスの右ボタンの状態です.
    Gain        m_Gain[2];              //!< 調整係数です.
    CAMERA_TYPE m_Type;                 //!< カメラタイプです.

    //=========================================================================
    // protected methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      マウスの状態からカメライベントを生成します.
    //-------------------------------------------------------------------------
    CameraEvent MakeEventFromMouse( int wheelDelta );

    //-------------------------------------------------------------------------
    //! @brief      キーの状態からカメライベントを作成します.
    //-------------------------------------------------------------------------
    CameraEvent MakeEventFromKey( uint32_t nChar, bool isKeyDown, bool isAltDown );

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx

