//-----------------------------------------------------------------------------
// File : asdxGraphicsDevice.h
// Desc : Graphics Device.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d12.h>
#include <dxgi1_6.h>
#include <asdxRef.h>
#include <asdxQueue.h>
#include <asdxDescriptor.h>
#include <mutex>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// GraphicsDevice class
///////////////////////////////////////////////////////////////////////////////
class GraphicsDevice
{
    //========================================================================
    // list of friend classes and methods.
    //========================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////
    // Desc structure
    ///////////////////////////////////////////////////////////////////////////
    struct Desc
    {
        uint32_t    MaxShaderResourceCount;         //!< 最大シェーダリソース数です.
        uint32_t    MaxSamplerCount;                //!< 最大サンプラー数です.
        uint32_t    MaxColorTargetCount;            //!< 最大カラーターゲット数です.
        uint32_t    MaxDepthTargetCount;            //!< 最大深度ターゲット数です.
        bool        EnableDebug;                    //!< デバッグモードを有効にします.
    };

    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      唯一のインスタンスを取得します.
    //!
    //! @return     唯一のインスタンスを返却します.
    //-------------------------------------------------------------------------
    static GraphicsDevice& Instance();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      desc        構成設定です.
    //! @retval true    初期化に成功.
    //! @retval fasle   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(const Desc* desc);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      ID3D12Device8を取得します.
    //!
    //! @return     ID3D12Device8を返却します.
    //-------------------------------------------------------------------------
    ID3D12Device8* GetDevice() const;

    //-------------------------------------------------------------------------
    //! @brief      IDXGIFactory7を取得します.
    //!
    //! @return     IDXGIFactory7を返却します.
    //-------------------------------------------------------------------------
    IDXGIFactory7* GetFactory() const;

    //-------------------------------------------------------------------------
    //! @brief      グラフィックスキューを取得します.
    //!
    //! @return     グラフィックスキューを返却します.
    //-------------------------------------------------------------------------
    Queue* GetGraphicsQueue();

    //-------------------------------------------------------------------------
    //! @brief      コンピュートキューを取得します.
    //!
    //! @return     コンピュートキューを返却します.
    //-------------------------------------------------------------------------
    Queue* GetComputeQueue();

    //-------------------------------------------------------------------------
    //! @brief      コピーキューを取得します.
    //!
    //! @return     コピーキューを返却します.
    //-------------------------------------------------------------------------
    Queue* GetCopyQueue();

    //-------------------------------------------------------------------------
    //! @brief      ビデオデコードキューを取得します.
    //!
    //! @return     ビデオデコードキューを返却します.
    //-------------------------------------------------------------------------
    Queue* GetVideoDecodeQueue();

    //-------------------------------------------------------------------------
    //! @brief      ビデオプロセスキューを取得します.
    //!
    //! @return     ビデオプロセスキューを返却します.
    //-------------------------------------------------------------------------
    Queue* GetVideoProcessQueue();

    //-------------------------------------------------------------------------
    //! @brief      ビデオエンコードキューを取得します.
    //!
    //! @return     ビデオエンコードキューを返却します.
    //-------------------------------------------------------------------------
    Queue* GetVideoEncodeQueue();

    //-------------------------------------------------------------------------
    //! @brief      ディスクリプターを確保します.
    //!
    //! @param[in]      index       ディスクリプタタイプです.
    //! @param[out]     ppResult    ディスクリプタの確保先です.
    //! @retval true    確保に成功.
    //! @retval false   確保に失敗.
    //-------------------------------------------------------------------------
    bool AllocHandle(int index, Descriptor** ppResult);

    //-------------------------------------------------------------------------
    //! @brief      アロー演算子です.
    //-------------------------------------------------------------------------
    ID3D12Device8* operator-> () const;

    //-------------------------------------------------------------------------
    //! @brief      ディスクリプタヒープを設定します.
    //-------------------------------------------------------------------------
    void SetDescriptorHeaps(ID3D12GraphicsCommandList* pCmdList);

    //-------------------------------------------------------------------------
    //! @brief      コマンドキューの実行完了を待機します.
    //-------------------------------------------------------------------------
    void WaitIdle();

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    static GraphicsDevice   s_Instance;                 //!< シングルトンインスタンス.
    RefPtr<IDXGIFactory7>   m_pFactory;                 //!< DXGIファクトリーです.
    RefPtr<ID3D12Debug3>    m_pDebug;                   //!< デバッグオブジェクト.
    RefPtr<ID3D12InfoQueue> m_pInfoQueue;               //!< インフォキュー.
    RefPtr<ID3D12Device8>   m_pDevice;                  //!< デバイス.
    RefPtr<Queue>           m_pGraphicsQueue;           //!< グラフィックスキュー.
    RefPtr<Queue>           m_pComputeQueue;            //!< コンピュートキュー.
    RefPtr<Queue>           m_pCopyQueue;               //!< コピーキュー.
    RefPtr<Queue>           m_pVideoDecodeQueue;        //!< ビデオデコードキュー.
    RefPtr<Queue>           m_pVideoProcessQueue;       //!< ビデオプロセスキュー.
    RefPtr<Queue>           m_pVideoEncodeQueue;        //!< ビデオエンコードキュー.
    DescriptorHeap          m_DescriptorHeap[4];        //!< ディスクリプタヒープ.
    std::mutex              m_Mutex;

    //=========================================================================
    // private methods
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    GraphicsDevice();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~GraphicsDevice();

    GraphicsDevice              (const GraphicsDevice&) = delete;   // アクセス禁止.
    GraphicsDevice& operator =  (const GraphicsDevice&) = delete;   // アクセス禁止.
};

//-----------------------------------------------------------------------------
//! @brief      グラフィックスデバイスを取得します.
//!
//! @return     グラフィックスデバイスを返却します.
//-----------------------------------------------------------------------------
inline GraphicsDevice& GfxDevice()
{ return GraphicsDevice::Instance(); }

} // namespace asdx
