//-----------------------------------------------------------------------------
// File : asdxBlackboard.h
// Desc : Blackboard.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <map>
#include <fnd/asdxHash.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Blackboard class
///////////////////////////////////////////////////////////////////////////////
class Blackboard
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Blackboard()
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Blackboard()
    { m_Map.clear(); }

    //-------------------------------------------------------------------------
    //! @brief      ポインタを設定します.
    //-------------------------------------------------------------------------
    void Set(const char* tag, const void* data, size_t size)
    {
        auto key = CalcHash(tag);
        BufferHolder holder;
        holder.pData = data;
        holder.size  = size;
        m_Map[key] = holder;
    }

    //-------------------------------------------------------------------------
    //! @brief      ポインタを設定します.
    //-------------------------------------------------------------------------
    void Set(uint32_t key, const void* data, size_t size)
    {
        BufferHolder holder;
        holder.pData = data;
        holder.size  = size;
        m_Map[key] = holder;
    }

    //-------------------------------------------------------------------------
    //! @brief      ポインタを取得します.
    //-------------------------------------------------------------------------
    const void* Get(const char* tag, size_t& size) const
    {
        auto key = CalcHash(tag);

        if (!Contains(key))
        { return nullptr; }

        auto& holder = m_Map.at(key);
        size = holder.size;
        return holder.pData;
    }

    //-------------------------------------------------------------------------
    //! @brief      ポインタを取得します.
    //-------------------------------------------------------------------------
    const void* Get(uint32_t key, size_t& size) const
    {
        if (!Contains(key))
        { return nullptr; }

        auto& holder = m_Map.at(key);
        size = holder.size;
        return holder.pData;
    }

    //-------------------------------------------------------------------------
    //! @brief      指定したタグ名が含まれるかチェックします.
    //-------------------------------------------------------------------------
    bool Contains(const char* tag) const
    {
        auto key = CalcHash(tag);
        return Contains(key);
    }

    //-------------------------------------------------------------------------
    //! @brief      指定されたキーが含まれるかチェックします.
    //-------------------------------------------------------------------------
    bool Contains(uint32_t key) const
    { return m_Map.find(key) != m_Map.end(); }

private:
    ///////////////////////////////////////////////////////////////////////////
    // BufferHolder structure
    ///////////////////////////////////////////////////////////////////////////
    struct BufferHolder
    {
        const void* pData = nullptr;
        size_t      size  = 0;
    };

    //=========================================================================
    // private variables.
    //=========================================================================
    std::map<uint32_t, BufferHolder>  m_Map;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx