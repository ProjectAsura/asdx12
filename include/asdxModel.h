//-----------------------------------------------------------------------------
// File : asdxModel.h
// Desc : Model.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <asdxResModel.h>
#include <asdxStructuredBuffer.h>
#include <asdxResourceUploader.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// BoundingBox structure
///////////////////////////////////////////////////////////////////////////////
struct BoundingBox
{
    asdx::Vector3   mini;
    asdx::Vector3   maxi;
};

///////////////////////////////////////////////////////////////////////////////
// Mesh class
///////////////////////////////////////////////////////////////////////////////
class Mesh
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Mesh();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Mesh();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      device          グラフィックスデバイスです.
    //! @param[in]      resource        スタティックメッシュリソースです.
    //! @param[in]      uploader        リソースアップローダです.
    //! @retval true    初期化成功.
    //! @retval false   初期化失敗.
    //-------------------------------------------------------------------------
    bool Init(
        GraphicsDevice&         device,
        const ResStaticMesh&    resource,
        ResourceUploader&       uploader);

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      device          グラフィックスデバイスです.
    //! @param[in]      resource        スキニングメッシュリソースです.
    //! @param[in]      uploader        リソースアップローダです.
    //! @retval true    初期化成功.
    //! @retval false   初期化失敗.
    //-------------------------------------------------------------------------
    bool Init(
        GraphicsDevice&         device,
        const ResSkinningMesh&  resource,
        ResourceUploader&       uploader);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      頂点データのGPU仮想アドレスを取得します.
    //!
    //! @return     頂点データのGPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetVertices() const;

    //-------------------------------------------------------------------------
    //! @brief      インデックスデータのGPU仮想アドレスを取得します.
    //!
    //! @return     インデックスデータのGPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetInindices() const;

    //-------------------------------------------------------------------------
    //! @brief      プリミティブデータのGPU仮想アドレスを取得します.
    //!
    //! @return     プリミティブデータのGPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetPrimitives() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュレットデータのGPU仮想アドレスを取得します.
    //!
    //! @return     メッシュレットデータのGPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetMeshlets() const;

    //-------------------------------------------------------------------------
    //! @brief      カリング情報のGPU仮想アドレスを取得します.
    //!
    //! @return     カリング情報のGPU仮想アドレスを返却します.
    //-------------------------------------------------------------------------
    D3D12_GPU_VIRTUAL_ADDRESS GetCullingInfos() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルハッシュを取得します.
    //!
    //! @return     マテリアルハッシュを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMaterialHash() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュレット数を取得します.
    //!
    //! @return     メッシュレット数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMeshletCount() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //!
    //! @return     バウンディングボックスを返却します.
    //-------------------------------------------------------------------------
    const BoundingBox& GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      ボーンを持つかどうか?
    //!
    //! @retval true    ボーンを持ちます.
    //! @retval false   ボーンを持ちません.
    //-------------------------------------------------------------------------
    bool HasBone() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t            m_MaterialHash;
    uint32_t            m_MeshletCount;
    BoundingBox         m_Box;
    StructuredBuffer    m_Vertices;
    StructuredBuffer    m_Indices;
    StructuredBuffer    m_Primitives;
    StructuredBuffer    m_Meshlets;
    StructuredBuffer    m_CullingInfos;
    bool                m_HasBone;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// Model class
///////////////////////////////////////////////////////////////////////////////
class Model
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Model();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Model();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      device      デバイスです.
    //! @param[in]      model       モデルリソースです.
    //! @param[in]      uploader    リソースアップローダーです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(GraphicsDevice& device, const ResModel& model, ResourceUploader& uploader);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      モデルハッシュを取得します.
    //!
    //! @return     モデルハッシュを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetModelHash() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュ数を取得します.
    //!
    //! @return     メッシュ数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMeshCount() const;

    //-------------------------------------------------------------------------
    //! @brief      メッシュを取得します.
    //!
    //! @param[in]      index       メッシュ番号です.
    //! @return     指定されたメッシュを返却します.
    //-------------------------------------------------------------------------
    const Mesh& GetMesh(uint32_t index) const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //!
    //! @return     バウンディングボックスを返却します.
    //-------------------------------------------------------------------------
    const BoundingBox& GetBox() const;

private:
    //=========================================================================
    // private variables
    //=========================================================================
    uint32_t            m_ModelHash;
    BoundingBox         m_Box;
    std::vector<Mesh>   m_Meshes;
    
    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

} // namespace asdx
