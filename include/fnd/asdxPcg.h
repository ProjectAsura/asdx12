//-----------------------------------------------------------------------------
// File : asdxPcg.h
// Desc : Permuted congruential generator.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <fnd/asdxBitCast.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Pcg class
///////////////////////////////////////////////////////////////////////////////
class Pcg
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Pcg()
    { SetSeed(12345678); }

    //-------------------------------------------------------------------------
    //! @brief      引き付きコンストラクタです.
    //!
    //! @param [in]     seed        設定する種.
    //-------------------------------------------------------------------------
    Pcg(uint64_t seed)
    { SetSeed(seed); }

    //-------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param [in]     random      複製元のインスタンス.
    //-------------------------------------------------------------------------
    Pcg(const Pcg& random)
    : m_State(random.m_State)
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Pcg() = default;

    //-------------------------------------------------------------------------
    //! @brief      ランダム種を設定します.
    //!
    //! @param [in]     seed        設定する種.
    //-------------------------------------------------------------------------
    void SetSeed(uint64_t seed)
    {
        m_State = seed + s_Increment;
        GetAsU32();
    }

    //-------------------------------------------------------------------------
    //! @brief      乱数をuint32_t型として取得します.
    //!
    //! @return     乱数を返却します.
    //-------------------------------------------------------------------------
    uint32_t GetAsU32()
    {
        auto x = m_State;
        auto n = uint32_t(x >> 59);

        m_State = x * s_Multiplier + s_Increment;
        x ^= x >> 18;
        return Rotate(uint32_t(x >> 27), n);
    }

    //-------------------------------------------------------------------------
    //! @brief      乱数をint型として取得します.
    //!
    //! @return     -0x80000000から0x7fffffffまでの範囲で乱数を返却します.
    //-------------------------------------------------------------------------
    int GetAsS32()
    { return bit_cast<int>(GetAsU32() & 0x7fffffff); }

    //-------------------------------------------------------------------------
    //! @brief      乱数をfloat型として取得します.
    //!
    //! @return     [0, 1)の乱数を返却します.
    //-------------------------------------------------------------------------
    float GetAsF32()
    { return float(GetAsU32() >> 8) / 16777216.0f; }

    //-------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param [in]     random      代入する値.
    //! @return     代入結果を返却します.
    //-------------------------------------------------------------------------
    Pcg& operator = (const Pcg& random)
    {
        m_State = random.m_State;
        return *this;
    }

    //-------------------------------------------------------------------------
    //! @brief      等価演算子です.
    //
    //! @param [in]     random      比較する値.
    //! @retval true    等価です.
    //! @retval false   非等価です.
    //-------------------------------------------------------------------------
    bool operator == (const Pcg& random) const
    { return (m_State == random.m_State); }

    //-------------------------------------------------------------------------
    //! @brief      非等価演算子です.
    //!
    //! @param [in]     random      比較する値.
    //! @retval true    非等価です.
    //! @retval false   等価です.
    //-------------------------------------------------------------------------
    bool operator != (const Pcg& random) const
    { return (m_State != random.m_State); }

private:
    //=========================================================================
    // private variables
    //=========================================================================
    static const uint64_t s_Multiplier = 6364136223846793005u;
    static const uint64_t s_Increment  = 1442695040888963407u;
    uint64_t              m_State      = 0x4d595df4d0f33173;

    //=========================================================================
    // private methods
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      ビット回転処理を行います.
    //-------------------------------------------------------------------------
    static uint32_t Rotate(uint32_t x, uint32_t r)
    { return x >> r | x << ((~r + 1u) & 31); }
};

} // namespace asdx
