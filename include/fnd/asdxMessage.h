//-----------------------------------------------------------------------------
// File : asdxMessage.h
// Desc : Message System.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <list>
#include <fnd/asdxFrameHeap.h>
#include <fnd/asdxQueue.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// Message class
///////////////////////////////////////////////////////////////////////////////
class Message : public asdx::Queue<Message>::Node
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //! 
    //! @param[in]      type        タイプです.
    //! @param[in]      buffer      バッファです.
    //! @param[in]      size        バッファサイズです.
    //-------------------------------------------------------------------------
    Message(uint32_t type, const void* buffer = nullptr, uint64_t size = 0)
    : m_Type    (type)
    , m_Size    (size)
    , m_pBuffer (buffer)
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      タイプを取得します.
    //! 
    //! @return     タイプを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetType() const
    { return m_Type; }

    //-------------------------------------------------------------------------
    //! @brief      バッファサイズを取得します.
    //! 
    //! @return     バッファサイズを返却します.
    //-------------------------------------------------------------------------
    uint64_t GetSize() const
    { return m_Size; }

    //-------------------------------------------------------------------------
    //! @brief      バッファを取得します.
    //! 
    //! @return     バッファを返却します.
    //-------------------------------------------------------------------------
    const void* GetBuffer() const
    { return m_pBuffer; }

    //-------------------------------------------------------------------------
    //! @brief      指定した型でバッファを取得します.
    //! 
    //! @return     バッファを返却します.
    //-------------------------------------------------------------------------
    template<typename T>
    const T* GetAs() const
    { return reinterpret_cast<const T*>(m_pBuffer); }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t    m_Type      = 0;
    uint64_t    m_Size      = 0;
    const void* m_pBuffer   = nullptr;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// IMessageListener
///////////////////////////////////////////////////////////////////////////////
struct IMessageListener
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IMessageListener()
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      メッセージ通知時の処理です.
    //-------------------------------------------------------------------------
    virtual void OnMessage(const Message& msg) = 0;
};

///////////////////////////////////////////////////////////////////////////////
// MessageMgr class
///////////////////////////////////////////////////////////////////////////////
class MessageMgr
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      シングルトンインスタンスを取得します.
    //! 
    //! @return     シングルトンインスタンスを返却します.
    //-------------------------------------------------------------------------
    static MessageMgr& Instance();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      size        フレームヒープサイズ
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(size_t size);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      メッセージリスナーを登録します.
    //! 
    //! @param[in]      instance        登録するメッセージリスナー.
    //-------------------------------------------------------------------------
    void Add(IMessageListener* instance);

    //-------------------------------------------------------------------------
    //! @brief      メッセージリスナーの登録を解除します.
    //! 
    //! @param[in]      instance        登録解除するメッセージリスナー.
    //-------------------------------------------------------------------------
    void Remove(IMessageListener* instance);

    //-------------------------------------------------------------------------
    //! @brief      全メッセージリスナーの登録を解除します.
    //-------------------------------------------------------------------------
    void Clear();

    //-------------------------------------------------------------------------
    //! @brief      メッセージを追加します.
    //-------------------------------------------------------------------------
    void PushMessage(const Message& msg);

    //-------------------------------------------------------------------------
    //! @brief      メッセージをブロードキャストします.
    //-------------------------------------------------------------------------
    void BroadCast();

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    static MessageMgr               s_Instance;
    std::list<IMessageListener*>    m_Listeners;
    asdx::FrameHeap                 m_Heap;
    asdx::Queue<Message>            m_Queue;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

inline void AddListener(IMessageListener* instance)
{ asdx::MessageMgr::Instance().Add(instance); }

inline void RemoveListener(IMessageListener* instance)
{ asdx::MessageMgr::Instance().Remove(instance); }

inline void SendMsg(const Message& msg)
{ asdx::MessageMgr::Instance().PushMessage(msg); }

} // namespace asdx

